@using NhanVT_MVC.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@using A02_Repos
@inject IAccountRepository AccountRepo
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FU News System</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="newsarticles">
                <span class="bi bi-newspaper me-2" aria-hidden="true"></span> News Articles
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="categories">
                <span class="bi bi-tags me-2" aria-hidden="true"></span> Categories
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="systemaccounts">
                <span class="bi bi-people me-2" aria-hidden="true"></span> Account Management
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="reports/news">
                <span class="bi bi-bar-chart me-2" aria-hidden="true"></span> Reports
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="profile">
                <span class="bi bi-person-circle me-2" aria-hidden="true"></span> Profile
            </NavLink>
        </div>

        @if (isAuthenticated)
        {
            <!-- Separator line -->
            <div class="border-top my-3"></div>

            <!-- User info section -->
            <div class="px-3 mb-2 text-white-50">
                @if (isAdmin)
                {
                    <small>User: <strong>Admin</strong></small>
                }
                else
                {
                    <small>User: @userEmail</small>
                }
            </div>

            <!-- Logout Button -->
            <div class="nav-item px-3">
                <button class="nav-link btn btn-link w-100 text-start d-flex align-items-center" @onclick="LogoutUser">
                    <span class="bi bi-box-arrow-right me-2" aria-hidden="true"></span> Logout
                </button>
            </div>
        }
        else
        {
            <!-- Separator line -->
            <div class="border-top my-3"></div>

            <!-- Login Link -->
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="bi bi-box-arrow-in-right me-2" aria-hidden="true"></span> Login
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private string userEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Need to check auth status after render since it uses JS interop
            await CheckAuthenticationStatus();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        try
        {
            isAuthenticated = await AuthService.IsAuthenticated();
            if (isAuthenticated)
            {
                // Check if user is admin
                isAdmin = await AuthService.IsAdmin();
                
                var email = await AuthService.GetUserEmail();
                
                // Only get account name if not admin
                if (!isAdmin)
                {
                    var user = AccountRepo.GetAccountByEmail(email);
                    if (user != null)
                    {
                        userEmail = user.AccountName;
                    }
                    else
                    {
                        userEmail = email;
                    }
                }
                else
                {
                    // For admin, we'll display "Admin" directly in the UI
                    userEmail = "Admin";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking authentication status: {ex.Message}");
            isAuthenticated = false;
            isAdmin = false;
        }
    }
    
    private async Task LogoutUser()
    {
        try
        {
            // Clear auth data using the AuthService
            await AuthService.Logout();
            
            // Update authentication status
            isAuthenticated = false;
            isAdmin = false;
            userEmail = string.Empty;
            
            // Show confirmation message
            await JSRuntime.InvokeVoidAsync("alert", "You have been logged out successfully.");
            
            // Redirect to login page
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error logging out: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error logging out. Please try again.");
        }
    }
}