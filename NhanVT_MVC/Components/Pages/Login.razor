@page "/login"
@using System.ComponentModel.DataAnnotations
@using A02_BOs
@using A02_Repos
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http.Extensions
@using System.Web
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAccountRepository AccountRepository
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <h4>Login to your account</h4>
            <hr />
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger">@errorMessage</div>
            }
            
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginViewModel loginModel = new();
    private string? errorMessage;
    
    protected override void OnInitialized()
    {
        // No need to clear session here anymore
    }

    private async Task HandleLogin()
    {
        try
        {
            // Get admin credentials
            var adminEmail = Configuration["AdminAccount:Email"];
            var adminPassword = Configuration["AdminAccount:Password"];

            // Build query parameters for auth
            var authData = new Dictionary<string, string>();
            string redirectUrl;

            // Check admin login
            if (loginModel.Email == adminEmail && loginModel.Password == adminPassword)
            {
                authData.Add("email", loginModel.Email);
                authData.Add("isAdmin", "true");
                
                // Set admin redirect URL
                redirectUrl = "/systemaccounts"; // Or whatever admin landing page you want
            }
            else
            {
                // Check regular user login
                var account = AccountRepository.GetAccount(loginModel.Email, loginModel.Password);
                if (account == null)
                {
                    errorMessage = "Invalid email or password";
                    return;
                }

                // Add auth info
                authData.Add("email", account.AccountEmail);
                authData.Add("roleId", account.AccountRole.Value.ToString());
                authData.Add("accountId", account.AccountId.ToString());

                // Determine redirect URL based on role
                redirectUrl = account.AccountRole.Value == 1 || account.AccountRole.Value == 2
                    ? "/newsarticles" // Update this to match your actual route
                    : "/unauthorized";
            }

            // Store auth data in localStorage
            foreach (var item in authData)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", item.Key, item.Value);
            }
            
            // Navigate to the landing page
            NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }

    public class LoginViewModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}