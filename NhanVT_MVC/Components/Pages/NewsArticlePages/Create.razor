@page "/newsarticles/create"
@using A02_BOs
@using A02_Repos
@using Microsoft.AspNetCore.Components.Forms
@using NhanVT_MVC.Services
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoriesRepo CategoryRepository
@inject ITagRepo TagRepository
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Create News Article</PageTitle>

<div class="container my-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (isLecturer)
    {
        <div class="alert alert-warning">
            <h4>Access Denied</h4>
            <p>Lecturers are not allowed to create news articles.</p>
            <button class="btn btn-primary" @onclick="RedirectToUnauthorized">Go to News Page</button>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h2 class="mb-0">Create News Article</h2>
            </div>
            <div class="card-body">
                <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newsTitle" class="form-label">Title <span class="text-danger">*</span></label>
                                <InputText id="newsTitle" @bind-Value="newsArticle.NewsTitle" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="headline" class="form-label">Headline <span class="text-danger">*</span></label>
                                <InputText id="headline" @bind-Value="newsArticle.Headline" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="category" class="form-label">Category</label>
                                <InputSelect id="category" @bind-Value="selectedCategoryId" class="form-select">
                                    <option value="">-- Select Category --</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                    }
                                </InputSelect>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Tags</label>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var tag in allTags)
                                    {
                                        int tagId = tag.TagId;
                                        bool isSelected = selectedTagIds.Contains(tagId);
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   value="@tagId" 
                                                   id="tag-@tagId" 
                                                   checked="@isSelected" 
                                                   @onchange="@(e => ToggleTag(tagId, e.Value != null && (bool)e.Value))" />
                                            <label class="form-check-label" for="tag-@tagId">
                                                @tag.TagName
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="newsContent" class="form-label">Content</label>
                                <InputTextArea id="newsContent" @bind-Value="newsArticle.NewsContent" class="form-control" rows="5" />
                                <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsSource" class="form-label">Source</label>
                                <InputText id="newsSource" @bind-Value="newsArticle.NewsSource" class="form-control" />
                                <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                            </div>
                            
                            <div class="form-check mb-3">
                                <input type="checkbox" id="newsStatus" 
                                       class="form-check-input" 
                                       checked="@isActive" 
                                       @onchange="@(e => isActive = e.Value != null && (bool)e.Value)" />
                                <label class="form-check-label" for="newsStatus">
                                    Active
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Create Article</button>
                        <a href="/newsarticles" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private NewsArticle newsArticle = new NewsArticle();
    private List<Category> categories = new List<Category>();
    private List<Tag> allTags = new List<Tag>();
    private List<int> selectedTagIds = new List<int>();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isActive = true;
    private bool isLecturer = false;
    private short? selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is authenticated using AuthService
            if (!await AuthService.IsAuthenticated())
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Check user role - if lecturer, restrict access
            var userRole = await AuthService.GetUserRole();
            if (userRole.HasValue && userRole.Value == 2)
            {
                isLecturer = true;
                isLoading = false;
                return;
            }

            // Load categories and tags
            await LoadLookupData();

            // Set initial values for the new article
            newsArticle = new NewsArticle
            {
                CreatedDate = DateTime.Now,
                ModifiedDate = DateTime.Now
            };
            
            // Get current user ID from AuthService
            var userId = await AuthService.GetUserId();
            if (userId.HasValue)
            {
                newsArticle.CreatedById = (short)userId.Value;
                newsArticle.UpdatedById = (short)userId.Value;
            }
            
            // Set default status
            isActive = true;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading page: " + ex.Message;
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Keep the OnAfterRenderAsync as a backup check
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Double-check user role using AuthService
                var userRole = await AuthService.GetUserRole();
                
                // Role 3 is lecturer - restrict access
                if (userRole.HasValue && userRole.Value == 2 && !isLecturer)
                {
                    isLecturer = true;
                    Console.WriteLine("Lecturer detected in OnAfterRenderAsync. Access to create restricted.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking role in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }
    
    private void RedirectToUnauthorized()
    {
        NavigationManager.NavigateTo("/newsarticles", forceLoad: true);
    }

    private async Task LoadLookupData()
    {
        // Load categories
        categories = CategoryRepository.getAllCategories();
        
        // Load tags
        allTags = TagRepository.GetAllTag();
    }

    private void ToggleTag(int tagId, bool isChecked)
    {
        if (isChecked && !selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Add(tagId);
        }
        else if (!isChecked && selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Remove(tagId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Check role again before saving to prevent circumvention
            var userRole = await AuthService.GetUserRole();
            if (userRole.HasValue && userRole.Value == 2)
            {
                NavigationManager.NavigateTo("/unauthorized", forceLoad: true);
                return;
            }
            
            // Get all existing news articles to determine next ID
            var allNews = NewsArticleRepository.GetNewsArticles();
            int nextId = 1;

            // Find the next available ID
            if (allNews != null && allNews.Any())
            {
                var numericIds = allNews
                    .Where(n => n.NewsArticleId != null)
                    .Where(n => int.TryParse(n.NewsArticleId, out _))
                    .Select(n => int.Parse(n.NewsArticleId));

                if (numericIds.Any())
                {
                    nextId = numericIds.Max() + 1;
                }
            }

            // Set the new ID
            newsArticle.NewsArticleId = nextId.ToString();

            // Set dates if not already set
            DateTime now = DateTime.Now;
            if (!newsArticle.CreatedDate.HasValue)
            {
                newsArticle.CreatedDate = now;
            }
            
            if (!newsArticle.ModifiedDate.HasValue)
            {
                newsArticle.ModifiedDate = now;
            }

            // Set the selected category
            if (selectedCategoryId.HasValue)
            {
                newsArticle.CategoryId = selectedCategoryId;
            }

            // Set the status from checkbox
            newsArticle.NewsStatus = isActive;

            // Get current user ID for created/updated by fields
            var userId = await AuthService.GetUserId();
            if (userId.HasValue)
            {
                if (!newsArticle.CreatedById.HasValue)
                {
                    newsArticle.CreatedById = (short)userId.Value;
                }
                newsArticle.UpdatedById = (short)userId.Value;
            }
            else
            {
                // If somehow we don't have a user ID, use a safe default
                if (!newsArticle.CreatedById.HasValue)
                {
                    newsArticle.CreatedById = 1; // Default as fallback
                }
                newsArticle.UpdatedById = 1; // Default as fallback
            }

            // Add the news article
            newsArticle.Tags = new List<Tag>();
            NewsArticleRepository.AddNews(newsArticle);

            // Add tags
            if (selectedTagIds.Any())
            {
                NewsArticleRepository.UpdateNewsArticleTags(newsArticle.NewsArticleId, selectedTagIds);
            }

            // Redirect to the list page
            NavigationManager.NavigateTo("/newsarticles");
        }
        catch (Exception ex)
        {
            errorMessage = "Error creating article: " + ex.Message;
            Console.WriteLine($"Error in HandleValidSubmit: {ex.Message}");
        }
    }
}