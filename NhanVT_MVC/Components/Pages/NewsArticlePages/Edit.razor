@page "/newsarticles/edit"
@using A02_BOs
@using A02_Repos
@using Microsoft.AspNetCore.Components.Forms
@using NhanVT_MVC.Services
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoriesRepo CategoryRepository
@inject IAccountRepository AccountRepository
@inject ITagRepo TagRepository
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Edit News Article</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (isLecturer)
{
    <div class="alert alert-warning">
        <h4>Access Denied</h4>
        <p>Lecturers are not allowed to edit news articles.</p>
        <button class="btn btn-primary" @onclick="RedirectToUnauthorized">Go to News Page</button>
    </div>
}
else if (newsArticle == null)
{
    <div class="alert alert-danger">
        <h4>Error</h4>
        <p>Could not load news article. @errorMessage</p>
        <button class="btn btn-primary" @onclick="RedirectToArticlesList">Back to News List</button>
    </div>
}
else
{
    <div class="container my-4">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark d-flex align-items-center">
                <i class="bi bi-pencil-square me-2 fs-4"></i>
                <h2 class="mb-0">Edit News Article</h2>
            </div>

            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="row">
                        <div class="col-lg-8">
                            <!-- Article Content -->
                            <div class="mb-3">
                                <label for="newsTitle" class="form-label">Title <span class="text-danger">*</span></label>
                                <InputText id="newsTitle" @bind-Value="newsArticle.NewsTitle" class="form-control" required />
                                <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="headline" class="form-label">Headline</label>
                                <InputTextArea id="headline" @bind-Value="newsArticle.Headline" class="form-control" rows="2" />
                                <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                            </div>

                            <div class="mb-3">
                                <label for="newsContent" class="form-label">Content</label>
                                <InputTextArea id="newsContent" @bind-Value="newsArticle.NewsContent" class="form-control" rows="8" />
                                <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="newsSource" class="form-label">Source</label>
                                <InputText id="newsSource" @bind-Value="newsArticle.NewsSource" class="form-control" />
                                <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                            </div>

                            @if (newsArticle.CreatedById.HasValue)
                            {
                                <div class="mb-3">
                                    <label class="form-label">Created By</label>
                                    <input type="text" class="form-control" value="@creatorName" disabled />
                                </div>
                            }
                        </div>
                        
                        <div class="col-lg-4">
                            <!-- Status & Classification -->
                            <div class="card mb-3">
                                <div class="card-header bg-light">Status</div>
                                <div class="card-body">
                                    <div class="form-check form-switch">
                                        <input type="checkbox" id="newsStatus" class="form-check-input" 
                                               checked="@isActive" 
                                               @onchange="@(e => isActive = e.Value != null && (bool)e.Value)" />
                                        <label class="form-check-label" for="newsStatus">
                                            @(isActive ? "Active" : "Inactive")
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-3">
                                <div class="card-header bg-light">Category</div>
                                <div class="card-body">
                                    <select class="form-select" @bind="selectedCategoryId">
                                        <option value="">-- Select Category --</option>
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId" selected="@(selectedCategoryId == category.CategoryId)">
                                                @category.CategoryName
                                            </option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="card mb-3">
                                <div class="card-header bg-light">Tags</div>
                                <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                                    @foreach (var tag in allTags)
                                    {
                                        int tagId = tag.TagId;
                                        bool isSelected = selectedTagIds.Contains(tagId);
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" 
                                                   value="@tagId" 
                                                   id="tag-@tagId" 
                                                   checked="@isSelected" 
                                                   @onchange="@(e => ToggleTag(tagId, e.Value != null && (bool)e.Value))" />
                                            <label class="form-check-label" for="tag-@tagId">
                                                @tag.TagName
                                            </label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-footer bg-light d-flex justify-content-between mt-3">
                        <div>
                            <a href="/newsarticles" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Back to List
                            </a>
                            <a href="@($"/newsarticles/details?newsarticleid={newsArticle.NewsArticleId}")" class="btn btn-outline-primary ms-2">
                                <i class="bi bi-eye"></i> View Details
                            </a>
                        </div>
                        <div>
                            <button type="submit" class="btn btn-warning btn-lg">
                                <i class="bi bi-save"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private string NewsArticleId { get; set; }

    private NewsArticle newsArticle;
    private bool isLoading = true;
    private bool isLecturer = false;
    private bool isActive;
    private List<Category> categories = new List<Category>();
    private List<Tag> allTags = new List<Tag>();
    private List<int> selectedTagIds = new List<int>();
    private string? errorMessage;
    private string creatorName = "Unknown";
    private short? selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Starting OnInitializedAsync with NewsArticleId: {NewsArticleId}");
            
            // Check if user is authenticated using AuthService instead of HttpContext
            if (!await AuthService.IsAuthenticated())
            {
                Console.WriteLine("User not authenticated. Redirecting to login.");
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Check role early - if lecturer, don't even load the article
            var userRole = await AuthService.GetUserRole();
            Console.WriteLine($"User role: {userRole}");
            
            if (userRole.HasValue && userRole.Value == 2)
            {
                // Set flag to show access denied message
                isLecturer = true;
                isLoading = false;
                Console.WriteLine("User is lecturer. Access denied.");
                return;
            }

            // Load the news article if user has proper permissions
            if (string.IsNullOrEmpty(NewsArticleId))
            {
                Console.WriteLine("NewsArticleId is empty. Redirecting to news list.");
                NavigationManager.NavigateTo("/newsarticles");
                return;
            }

            Console.WriteLine($"Fetching news article with ID: {NewsArticleId}");
            newsArticle = NewsArticleRepository.getNewsById(NewsArticleId);
            
            if (newsArticle == null)
            {
                Console.WriteLine("News article not found.");
                errorMessage = "News article not found.";
                isLoading = false;
                return;
            }

            Console.WriteLine($"News article loaded: {newsArticle.NewsTitle}");
            
            // Initialize form fields
            isActive = newsArticle.NewsStatus == true;
            selectedCategoryId = newsArticle.CategoryId;

            // Get creator name
            if (newsArticle.CreatedById.HasValue)
            {
                var creator = AccountRepository.GetAccountById(newsArticle.CreatedById.Value);
                if (creator != null)
                {
                    creatorName = creator.AccountName;
                }
            }

            // Load tags and categories
            Console.WriteLine("Loading lookup data (categories and tags)...");
            await LoadLookupData();
            Console.WriteLine($"Loaded {categories.Count} categories and {allTags.Count} tags");

            // Get current tags
            if (newsArticle.Tags != null && newsArticle.Tags.Any())
            {
                selectedTagIds = newsArticle.Tags.Select(t => t.TagId).ToList();
                Console.WriteLine($"Selected tags: {string.Join(", ", selectedTagIds)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading article: " + ex.Message;
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            Console.WriteLine("OnInitializedAsync completed");
        }
    }

    private async Task LoadLookupData()
    {
        // Load categories
        categories = CategoryRepository.getAllCategories();
        
        // Load tags
        allTags = TagRepository.GetAllTag();
    }

    private void ToggleTag(int tagId, bool isChecked)
    {
        if (isChecked && !selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Add(tagId);
        }
        else if (!isChecked && selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Remove(tagId);
        }
    }

    private void RedirectToArticlesList()
    {
        NavigationManager.NavigateTo("/newsarticles");
    }
    
    private void RedirectToUnauthorized()
    {
        NavigationManager.NavigateTo("/newsarticles", forceLoad: true);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("Handling form submission...");
            
            // Check role again before saving to prevent circumvention
            var userRole = await AuthService.GetUserRole();
            if (userRole.HasValue && userRole.Value == 2)
            {
                NavigationManager.NavigateTo("/unauthorized", forceLoad: true);
                return;
            }
            
            // Set status from checkbox
            newsArticle.NewsStatus = isActive;
            
            // Set category
            newsArticle.CategoryId = selectedCategoryId;
            Console.WriteLine($"Setting category ID: {selectedCategoryId}");

            // Get current user from AuthService as the updater
            var userId = await AuthService.GetUserId();
            if (userId.HasValue)
            {
                newsArticle.UpdatedById = (short)userId.Value;
                Console.WriteLine($"Setting updater ID: {userId}");
            }
            
            // Set modified date to now
            newsArticle.ModifiedDate = DateTime.Now;
            
            // Update the news article
            Console.WriteLine("Updating news article...");
            NewsArticleRepository.UpdateNews(newsArticle);
            
            // Update the tags
            Console.WriteLine($"Updating tags: {string.Join(", ", selectedTagIds)}");
            NewsArticleRepository.UpdateNewsArticleTags(newsArticle.NewsArticleId, selectedTagIds);
            
            // Redirect to the list page
            Console.WriteLine("Update successful. Redirecting to news list.");
            NavigationManager.NavigateTo("/newsarticles");
        }
        catch (Exception ex)
        {
            errorMessage = "Error saving changes: " + ex.Message;
            Console.WriteLine($"Error in HandleValidSubmit: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
    }
}