@page "/newsarticles/edit"
@using A02_BOs
@using A02_Repos
@using Microsoft.AspNetCore.Components.Forms
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoriesRepo CategoryRepository
@inject IAccountRepository AccountRepository
@inject ITagRepo TagRepository
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Edit News Article</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (newsArticle == null)
{
    <div class="alert alert-danger">
        Article not found. <a href="/newsarticles">Return to list</a>
    </div>
}
else
{
    <div class="container my-4">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark d-flex align-items-center">
                <i class="bi bi-pencil-square me-2 fs-4"></i>
                <h2 class="mb-0">Edit News Article</h2>
            </div>

            <div class="card-body">
                <EditForm Model="newsArticle" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="row">
                        <div class="col-lg-8">
                            <!-- Article Content -->
                            <div class="card mb-4">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Basic Information</h5>
                                    <span class="badge bg-secondary">ID: @newsArticle.NewsArticleId</span>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="newsTitle" class="form-label fw-bold">Title <span class="text-danger">*</span></label>
                                        <InputText id="newsTitle" @bind-Value="newsArticle.NewsTitle" class="form-control form-control-lg" required />
                                        <ValidationMessage For="@(() => newsArticle.NewsTitle)" class="text-danger" />
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="headline" class="form-label fw-bold">Headline <span class="text-danger">*</span></label>
                                        <InputText id="headline" @bind-Value="newsArticle.Headline" class="form-control" required />
                                        <ValidationMessage For="@(() => newsArticle.Headline)" class="text-danger" />
                                        <div class="form-text">A concise summary that appears in search results</div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="newsContent" class="form-label fw-bold">Content <span class="text-danger">*</span></label>
                                        <InputTextArea id="newsContent" @bind-Value="newsArticle.NewsContent" class="form-control" style="min-height: 300px;" required />
                                        <ValidationMessage For="@(() => newsArticle.NewsContent)" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <!-- Source Information -->
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Source Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="newsSource" class="form-label fw-bold">Source</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="bi bi-link"></i></span>
                                            <InputText id="newsSource" @bind-Value="newsArticle.NewsSource" class="form-control" placeholder="URL or reference to original source" />
                                        </div>
                                        <ValidationMessage For="@(() => newsArticle.NewsSource)" class="text-danger" />
                                        <div class="form-text">If this article references external content, please include the original source.</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Creation Information -->
                            <div class="card mb-4">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Article History</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Created By</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="bi bi-person"></i></span>
                                                <input class="form-control bg-light" value="@creatorName" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label fw-bold">Created Date</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                                                <input class="form-control bg-light" value="@(newsArticle.CreatedDate?.ToString("dd/MM/yyyy HH:mm") ?? "Unknown")" readonly />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-lg-4">
                            <!-- Status & Classification -->
                            <div class="card mb-4 sticky-top" style="top: 10px; z-index: 100;">
                                <div class="card-header bg-light">
                                    <h5 class="mb-0">Status & Classification</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-4">
                                        <label class="form-label fw-bold">Status <span class="text-danger">*</span></label>
                                        <div class="d-flex gap-3">
                                            <div class="form-check">
                                                <input type="radio" class="form-check-input" id="statusActive" 
                                                       checked="@isActive"
                                                       @onchange="@(e => isActive = true)" />
                                                <label class="form-check-label" for="statusActive">
                                                    <span class="badge bg-success">Active</span> - Visible to users
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input type="radio" class="form-check-input" id="statusInactive" 
                                                       checked="@(!isActive)" 
                                                       @onchange="@(e => isActive = false)" />
                                                <label class="form-check-label" for="statusInactive">
                                                    <span class="badge bg-danger">Inactive</span> - Hidden from users
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="mb-4">
                                        <label for="categoryId" class="form-label fw-bold">Category <span class="text-danger">*</span></label>
                                        <InputSelect id="categoryId" @bind-Value="selectedCategoryId" class="form-select">
                                            <option value="">-- Select Category --</option>
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category.CategoryId">@category.CategoryName</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    
                                    <div class="mb-4">
                                        <label class="form-label fw-bold">Tags</label>
                                        <div class="p-3 border rounded bg-light d-flex flex-wrap gap-2" style="max-height: 200px; overflow-y: auto;">
                                            @foreach (var tag in allTags)
                                            {
                                                int tagId = tag.TagId;
                                                bool isSelected = selectedTagIds.Contains(tagId);
                                                
                                                <div class="form-check">
                                                    <input type="checkbox" 
                                                        id="tag_@tagId" 
                                                        class="form-check-input" 
                                                        checked="@isSelected" 
                                                        @onchange="@(e => ToggleTag(tagId, e.Value != null && (bool)e.Value))" />
                                                    <label for="tag_@tagId" class="form-check-label">@tag.TagName</label>
                                                </div>
                                            }
                                        </div>
                                        <div class="form-text mt-2">Select relevant tags to improve searchability.</div>
                                    </div>
                                    
                                    <div class="alert alert-info d-flex align-items-center">
                                        <i class="bi bi-info-circle-fill me-2"></i>
                                        <div>
                                            <small>This edit will be logged with your account information.</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card-footer bg-light d-flex justify-content-between mt-3">
                        <div>
                            <a href="/newsarticles" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Back to List
                            </a>
                            <a href="@($"/newsarticles/details?newsarticleid={newsArticle.NewsArticleId}")" class="btn btn-outline-primary ms-2">
                                <i class="bi bi-eye"></i> View Details
                            </a>
                        </div>
                        <div>
                            <button type="submit" class="btn btn-warning btn-lg">
                                <i class="bi bi-save"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private string NewsArticleId { get; set; }

    private NewsArticle newsArticle;
    private bool isLoading = true;
    private bool isActive;
    private List<Category> categories = new List<Category>();
    private List<Tag> allTags = new List<Tag>();
    private List<int> selectedTagIds = new List<int>();
    private string? errorMessage;
    private string creatorName = "Unknown";
    private short? selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is logged in
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext == null || string.IsNullOrEmpty(httpContext.Session.GetString("Email")))
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Check if user has correct role (staff)
            var role = httpContext.Session.GetInt32("RoleId");
            if (role != 1 && role != 2) // assuming 1 is staff and 2 is another valid role
            {
                NavigationManager.NavigateTo("/unauthorized", forceLoad: true);
                return;
            }

            // Load the news article
            if (string.IsNullOrEmpty(NewsArticleId))
            {
                NavigationManager.NavigateTo("/newsarticles");
                return;
            }

            newsArticle = NewsArticleRepository.getNewsById(NewsArticleId);
            
            if (newsArticle == null)
            {
                isLoading = false;
                return;
            }

            // Initialize form fields
            isActive = newsArticle.NewsStatus == true;
            selectedCategoryId = newsArticle.CategoryId;

            // Get creator name
            if (newsArticle.CreatedById.HasValue)
            {
                var creator = AccountRepository.GetAccountById(newsArticle.CreatedById.Value);
                if (creator != null)
                {
                    creatorName = creator.AccountName;
                }
            }

            // Load tags and categories
            await LoadLookupData();

            // Get current tags
            if (newsArticle.Tags != null && newsArticle.Tags.Any())
            {
                selectedTagIds = newsArticle.Tags.Select(t => t.TagId).ToList();
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading article: " + ex.Message;
            isLoading = false;
        }
    }

    private async Task LoadLookupData()
    {
        // Load categories
        categories = CategoryRepository.getAllCategories();
        
        // Load tags
        allTags = TagRepository.GetAllTag();
    }

    private void ToggleTag(int tagId, bool isChecked)
    {
        if (isChecked && !selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Add(tagId);
        }
        else if (!isChecked && selectedTagIds.Contains(tagId))
        {
            selectedTagIds.Remove(tagId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Set status from radio buttons
            newsArticle.NewsStatus = isActive;
            
            // Set category
            newsArticle.CategoryId = selectedCategoryId;

            // Get current user as the updater
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                var accountId = httpContext.Session.GetInt32("AccountId");
                if (accountId.HasValue)
                {
                    newsArticle.UpdatedById = (short)accountId.Value;
                }
            }
            
            // Set modified date to now
            newsArticle.ModifiedDate = DateTime.Now;
            
            // Update the news article
            NewsArticleRepository.UpdateNews(newsArticle);
            
            // Update the tags
            NewsArticleRepository.UpdateNewsArticleTags(newsArticle.NewsArticleId, selectedTagIds);
            
            // Redirect to the list page
            NavigationManager.NavigateTo("/newsarticles");
        }
        catch (Exception ex)
        {
            errorMessage = "Error saving changes: " + ex.Message;
        }
    }
}