@page "/newsarticles/delete"
@using A02_BOs
@using A02_Repos
@using NhanVT_MVC.Services
@inject INewsArticleRepository NewsArticleRepository
@inject IAccountRepository AccountRepository
@inject ICategoriesRepo CategoryRepository
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Delete Article</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (isLecturer)
{
    <div class="alert alert-warning">
        <h4>Access Denied</h4>
        <p>Lecturers are not allowed to delete news articles.</p>
        <button class="btn btn-primary" @onclick="RedirectToUnauthorized">Go to News Page</button>
    </div>
}
else if (newsArticle == null)
{
    <div class="alert alert-danger">
        Article not found. <a href="/newsarticles">Return to list</a>
    </div>
}
else
{
    <div class="container my-4">
        <div class="card shadow border-danger">
            <div class="card-header bg-danger text-white d-flex align-items-center">
                <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
                <h2 class="mb-0">Delete Article Confirmation</h2>
            </div>

            <div class="card-body">
                <div class="alert alert-warning mb-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-circle fs-3 me-3"></i>
                        <div>
                            <h5 class="mb-1">Are you sure you want to delete this article?</h5>
                            <p class="mb-0">This action cannot be undone. All associated data will be permanently removed.</p>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h4 class="text-danger mb-3">@newsArticle.NewsTitle</h4>
                                <p class="text-muted fs-5">@newsArticle.Headline</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Rest of your UI remains unchanged -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Article Details</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Category:</span>
                                        <span class="badge bg-primary">@categoryName</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Status:</span>
                                        @if (newsArticle.NewsStatus == true)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Created On:</span>
                                        <span>@(newsArticle.CreatedDate?.ToString("dd/MM/yyyy HH:mm") ?? "Unknown")</span>
                                    </li>
                                    @if (!string.IsNullOrEmpty(newsArticle.NewsSource))
                                    {
                                        <li class="list-group-item">
                                            <span class="fw-bold">Source:</span>
                                            <a href="@newsArticle.NewsSource" target="_blank" class="d-block text-truncate">@newsArticle.NewsSource</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h5 class="mb-0">Authorship Information</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Created By:</span>
                                        <span>@creatorName</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Author Email:</span>
                                        <span>@creatorEmail</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Last Updated By:</span>
                                        <span>@updaterName</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between">
                                        <span class="fw-bold">Last Modified:</span>
                                        <span>@(newsArticle.ModifiedDate?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Content Preview</h5>
                    </div>
                    <div class="card-body">
                        <div class="content-preview bg-light p-3 rounded" style="max-height: 200px; overflow-y: auto;">
                            @((MarkupString)newsArticle.NewsContent)
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer d-flex justify-content-between">
                <a href="/newsarticles" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
                <button @onclick="DeleteNewsArticle" class="btn btn-danger">
                    <i class="bi bi-trash"></i> Confirm Delete
                </button>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private string NewsArticleId { get; set; }

    private NewsArticle newsArticle;
    private bool isLoading = true;
    private bool isLecturer = false;
    private string? errorMessage;
    private string creatorName = "Unknown";
    private string creatorEmail = "Unknown";
    private string updaterName = "Unknown";
    private string categoryName = "Uncategorized";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is authenticated using AuthService
            if (!await AuthService.IsAuthenticated())
            {
                NavigationManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Check user role - if lecturer (role 3), restrict access
            var userRole = await AuthService.GetUserRole();
            if (userRole.HasValue && userRole.Value == 2)
            {
                isLecturer = true;
                isLoading = false;
                return;
            }

            // Load the news article
            if (string.IsNullOrEmpty(NewsArticleId))
            {
                NavigationManager.NavigateTo("/newsarticles");
                return;
            }

            newsArticle = NewsArticleRepository.getNewsById(NewsArticleId);
            
            if (newsArticle == null)
            {
                isLoading = false;
                return;
            }

            // Get creator information
            if (newsArticle.CreatedById.HasValue)
            {
                var creator = AccountRepository.GetAccountById(newsArticle.CreatedById.Value);
                if (creator != null)
                {
                    creatorName = creator.AccountName;
                    creatorEmail = creator.AccountEmail;
                }
            }
            
            // Get updater information
            if (newsArticle.UpdatedById.HasValue)
            {
                var updater = AccountRepository.GetAccountById(newsArticle.UpdatedById.Value);
                if (updater != null)
                {
                    updaterName = updater.AccountName;
                }
            }
            
            // Get category name
            if (newsArticle.CategoryId.HasValue)
            {
                var category = CategoryRepository.GetCategoryId(newsArticle.CategoryId.Value);
                if (category != null)
                {
                    categoryName = category.CategoryName;
                }
            }

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading article: " + ex.Message;
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            isLoading = false;
        }
    }

    // Keep the OnAfterRenderAsync as a backup check
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Double-check user role using AuthService
                var userRole = await AuthService.GetUserRole();
                
                // Role 3 is lecturer - restrict access
                if (userRole.HasValue && userRole.Value == 2 && !isLecturer)
                {
                    isLecturer = true;
                    Console.WriteLine("Lecturer detected in OnAfterRenderAsync. Access to delete restricted.");
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error checking role in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private void RedirectToUnauthorized()
    {
        NavigationManager.NavigateTo("/newsarticles", forceLoad: true);
    }

    private async Task DeleteNewsArticle()
    {
        try
        {
            // Check role again before deleting to prevent circumvention
            var userRole = await AuthService.GetUserRole();
            if (userRole.HasValue && userRole.Value == 2)
            {
                NavigationManager.NavigateTo("/unauthorized", forceLoad: true);
                return;
            }
            
            if (newsArticle != null)
            {
                // Delete the news article
                NewsArticleRepository.RemoveNews(newsArticle.NewsArticleId.ToString());
                
                // Redirect to the list page
                NavigationManager.NavigateTo("/newsarticles");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error deleting article: " + ex.Message;
            Console.WriteLine($"Error in DeleteNewsArticle: {ex.Message}");
        }
    }
}