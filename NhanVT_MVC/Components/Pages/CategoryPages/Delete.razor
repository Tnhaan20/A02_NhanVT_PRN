@page "/categories/delete"
@using A02_BOs
@using A02_Repos
@inject ICategoriesRepo CategoryRepository
@inject INewsArticleRepository NewsArticleRepository
@inject NavigationManager NavigationManager

<PageTitle>Delete Category</PageTitle>

<div class="container mt-4">
    <div class="card shadow border-danger">
        <div class="card-header bg-danger text-white d-flex align-items-center">
            <i class="bi bi-exclamation-triangle-fill me-2 fs-4"></i>
            <h3 class="mb-0">Delete Category</h3>
        </div>
        
        <div class="card-body">
            @if (isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (category == null)
            {
                <div class="alert alert-danger">
                    <h4>Not Found</h4>
                    <p>The requested category could not be found.</p>
                </div>
            }
            else
            {
                <div class="alert alert-warning mb-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-circle fs-3 me-3"></i>
                        <div>
                            <h5 class="mb-1">Are you sure you want to delete this category?</h5>
                            <p class="mb-0">This action cannot be undone.</p>
                        </div>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                
                <h4 class="mb-3">Category Details</h4>
                <dl class="row">
                    <dt class="col-sm-3">Category Name</dt>
                    <dd class="col-sm-9">@category.CategoryName</dd>
                    
                    <dt class="col-sm-3">Description</dt>
                    <dd class="col-sm-9">
                        @if (!string.IsNullOrEmpty(category.CategoryDesciption))
                        {
                            @category.CategoryDesciption
                        }
                        else
                        {
                            <span class="text-muted">No description</span>
                        }
                    </dd>
                    
                    <dt class="col-sm-3">Status</dt>
                    <dd class="col-sm-9">
                        @if (category.IsActive == true)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Inactive</span>
                        }
                    </dd>
                    
                    <dt class="col-sm-3">Parent Category</dt>
                    <dd class="col-sm-9">
                        @if (parentCategory != null)
                        {
                            @parentCategory.CategoryName
                        }
                        else
                        {
                            <span class="text-muted">None</span>
                        }
                    </dd>
                </dl>
                
                <div class="d-flex gap-2 mt-4">
                    <button class="btn btn-danger" @onclick="DeleteCategoryHandler">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <a href="/categories" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Cancel
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "categoryid")]
    public string categoryIdString { get; set; }
    
    private Category category;
    private Category parentCategory;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    
    protected override void OnInitialized()
    {
        try
        {
            // Parse the category ID from the query string
            if (string.IsNullOrEmpty(categoryIdString) || !short.TryParse(categoryIdString, out short categoryId))
            {
                // Invalid ID, don't try to load a category
                errorMessage = "Invalid category ID";
                isLoading = false;
                return;
            }
            
            // Get the category by ID
            category = CategoryRepository.GetCategoryId(categoryId);
            
            if (category == null)
            {
                // Category not found
                errorMessage = "Category not found";
                isLoading = false;
                return;
            }
            
            // If we have a category and it has a parent, get the parent
            if (category.ParentCategoryId.HasValue)
            {
                parentCategory = CategoryRepository.GetCategoryId(category.ParentCategoryId.Value);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category: {ex.Message}";
            Console.WriteLine($"Error initializing page: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void DeleteCategoryHandler()
    {
        try
        {
            if (category != null)
            {
                // Check if the category is in use
                if (NewsArticleRepository.isInUsed(category.CategoryId))
                {
                    errorMessage = "This category cannot be deleted because it is referenced by news articles in the system.";
                    return;
                }
                
                // All checks passed, delete the category
                CategoryRepository.DeleteCategory(category.CategoryId);
                
                // Redirect to the category list
                NavigationManager.NavigateTo("/categories");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting category: {ex.Message}";
            Console.WriteLine($"Error deleting category: {ex.Message}");
        }
    }
}