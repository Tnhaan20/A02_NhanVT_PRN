@page "/systemaccounts/edit"
@using A02_BOs
@using A02_Repos
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Edit Account</PageTitle>

@if (isUnauthorized)
{
    <div class="alert alert-danger">
        <h4>Unauthorized</h4>
        <p>You do not have permission to access this page.</p>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (account == null)
{
    <div class="alert alert-danger">
        <h4>Not Found</h4>
        <p>The requested account could not be found.</p>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Edit Account</h3>
            </div>
            
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mb-3">
                        <i class="bi bi-check-circle me-2"></i>
                        @successMessage
                    </div>
                }
                
                <EditForm Model="account" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    
                    <input type="hidden" @bind-value="account.AccountId" />
                    
                    <div class="mb-3">
                        <label for="accountName" class="form-label">Full Name</label>
                        <InputText id="accountName" @bind-Value="account.AccountName" class="form-control" />
                        <ValidationMessage For="@(() => account.AccountName)" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="accountEmail" class="form-label">Email Address</label>
                        <InputText id="accountEmail" @bind-Value="account.AccountEmail" class="form-control" type="email" />
                        <ValidationMessage For="@(() => account.AccountEmail)" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="accountRole" class="form-label">Role</label>
                        <InputSelect id="accountRole" @bind-Value="account.AccountRole" class="form-select">
                            <option value="1">Staff</option>
                            <option value="2">Lecturer</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => account.AccountRole)" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="accountPassword" class="form-label">Password</label>
                        <InputText id="accountPassword" @bind-Value="account.AccountPassword" class="form-control" />
                        <ValidationMessage For="@(() => account.AccountPassword)" class="text-danger" />
                    </div>
                    
                    <div class="mt-4 d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-save"></i> Save Changes
                        </button>
                        <a href="/systemaccounts" class="btn btn-secondary">Cancel</a>
                    </div>
                </EditForm>
            </div>
        </div>
        
        <div class="mt-3">
            <a href="/systemaccounts" class="btn btn-outline-dark">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "accountid")]
    public string accountIdString { get; set; }
    
    private SystemAccount account;
    private bool isLoading = true;
    private bool isUnauthorized = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    protected override void OnInitialized()
    {
        try
        {
            // Check authorization
            var httpContext = HttpContextAccessor.HttpContext;
            // if (httpContext != null)
            // {
            //     var email = httpContext.Session.GetString("Email");
            //     var roleId = httpContext.Session.GetInt32("RoleId");
            //     var isAdmin = httpContext.Session.GetString("IsAdmin");
                
            //     if (string.IsNullOrEmpty(email))
            //     {
            //         NavigationManager.NavigateTo("/login");
            //         return;
            //     }
                
            //     Check authorization - only admin or role 1 can access
            //     if ((roleId != 1) && (isAdmin != "true"))
            //     {
            //         isUnauthorized = true;
            //         isLoading = false;
            //         return;
            //     }
            // }
            
            // Parse account ID from query parameter
            if (string.IsNullOrEmpty(accountIdString) || !short.TryParse(accountIdString, out short accountId))
            {
                errorMessage = "Invalid account ID";
                isLoading = false;
                return;
            }
            
            // Load the account data
            account = AccountRepository.GetAccountById(accountId);
            
            if (account == null)
            {
                errorMessage = "Account not found";
                isLoading = false;
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading account: {ex.Message}";
            Console.WriteLine($"Error initializing page: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void HandleValidSubmit()
    {
        try
        {
            // Clear messages
            successMessage = string.Empty;
            errorMessage = string.Empty;
            
            // Update the account
            AccountRepository.UpdateAccount(account.AccountId, account);
            
            // Show success message
            successMessage = "Account updated successfully!";
            
            // Stay on the same page to show the success message
            // Or redirect to the list if preferred:
            // NavigationManager.NavigateTo("/systemaccounts");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating account: {ex.Message}";
            Console.WriteLine($"Error updating account: {ex.Message}");
        }
    }
}