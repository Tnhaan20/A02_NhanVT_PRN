@page "/systemaccounts"
@using A02_BOs
@using A02_Repos
@using Microsoft.AspNetCore.Components.QuickGrid
@implements IAsyncDisposable
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@using NhanVT_MVC.Components.Auth
<PageTitle>Manage Accounts</PageTitle>


<AuthCheck RequireAdmin="true"> 

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Manage Accounts</h3>
            <a href="/systemaccounts/create" class="btn btn-success">
                <i class="bi bi-plus-circle"></i> Create New Account
            </a>
        </div>
        
        <div class="card-body">
            @if (isUnauthorized)
            {
                <div class="alert alert-danger">
                    <h4>Unauthorized</h4>
                    <p>You do not have permission to access this function.</p>
                </div>
            }
            else if (isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Account Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Password</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var account in accounts)
                            {
                                <tr>
                                    <td>@account.AccountName</td>
                                    <td>@account.AccountEmail</td>
                                    <td>
                                        @if (account.AccountRole == 1)
                                        {
                                            <span class="badge bg-primary">Staff</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-info">Lecturer</span>
                                        }
                                    </td>
                                    <td>@account.AccountPassword</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@($"systemaccounts/edit?accountid={account.AccountId}")" class="btn btn-sm btn-primary">
                                                <i class="bi bi-pencil"></i> Edit
                                            </a>
                                            <a href="@($"systemaccounts/details?accountid={account.AccountId}")" class="btn btn-sm btn-info">
                                                <i class="bi bi-info-circle"></i> Details
                                            </a>
                                            <a href="@($"systemaccounts/delete?accountid={account.AccountId}")" class="btn btn-sm btn-danger">
                                                <i class="bi bi-trash"></i> Delete
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!accounts.Any())
                {
                    <div class="alert alert-info text-center mt-3">
                        <i class="bi bi-info-circle"></i> No accounts found. Create your first account!
                    </div>
                }
            }
        </div>
        
        <div class="card-footer text-muted">
            <small>Total accounts: @(accounts?.Count() ?? 0)</small>
        </div>
    </div>
</div>
</AuthCheck>
@code {
    private List<SystemAccount> accounts = new List<SystemAccount>();
    private bool isLoading = true;
    private bool isUnauthorized = false;

    protected override void OnInitialized()
    {
        try
        {
            // Check if the user is authorized
            // var httpContext = HttpContextAccessor.HttpContext;
            // if (httpContext != null)
            // {
            //     var email = httpContext.Session.GetString("Email");
            //     var isAdmin = httpContext.Session.GetString("IsAdmin");
            //     var roleId = httpContext.Session.GetInt32("RoleId");

            //     if (string.IsNullOrEmpty(email) && string.IsNullOrEmpty(isAdmin))
            //     {
            //         User is not logged in, redirect to login
            //         NavigationManager.NavigateTo("/login");
            //         return;
            //     }

            //     if ((roleId != 1 && roleId != 2) && !(isAdmin == "true"))
            //     {
            //         User is not authorized to view this page
            //         isUnauthorized = true;
            //         isLoading = false;
            //         return;
            //     }
            // }

            // User is authorized, load accounts
            accounts = AccountRepository.getAllAccounts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading accounts: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Since we're using repository pattern and not a DbContext directly
    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}