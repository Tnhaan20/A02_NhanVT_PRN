@page "/systemaccounts/delete"
@using A02_BOs
@using A02_Repos
@inject IAccountRepository AccountRepository
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Delete Account</PageTitle>

@if (isUnauthorized)
{
    <div class="alert alert-danger">
        <h4>Unauthorized</h4>
        <p>You do not have permission to access this page.</p>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (account == null)
{
    <div class="alert alert-danger">
        <h4>Not Found</h4>
        <p>The requested account could not be found.</p>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card shadow border-danger">
            <div class="card-header bg-danger text-white">
                <h3 class="mb-0">Delete Account</h3>
            </div>
            
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                
                <div class="alert alert-warning mb-4">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-circle fs-3 me-3"></i>
                        <div>
                            <h5 class="mb-1">Are you sure you want to delete this account?</h5>
                            <p class="mb-0">This action cannot be undone.</p>
                        </div>
                    </div>
                </div>
                
                <h4>Account Details</h4>
                <hr />
                <dl class="row">
                    <dt class="col-sm-3">Account Name</dt>
                    <dd class="col-sm-9">@account.AccountName</dd>
                    
                    <dt class="col-sm-3">Email</dt>
                    <dd class="col-sm-9">@account.AccountEmail</dd>
                    
                    <dt class="col-sm-3">Role</dt>
                    <dd class="col-sm-9">
                        @if (account.AccountRole == 1)
                        {
                            <span class="badge bg-primary">Staff</span>
                        }
                        else if (account.AccountRole == 2)
                        {
                            <span class="badge bg-info">Lecturer</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Unknown</span>
                        }
                    </dd>
                    
                    <dt class="col-sm-3">Password</dt>
                    <dd class="col-sm-9">@account.AccountPassword</dd>
                </dl>
            </div>
            
            <div class="card-footer">
                <div class="d-flex gap-2">
                    <button @onclick="DeleteAccount" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <a href="/systemaccounts" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "accountid")]
    public string accountIdString { get; set; }
    
    private SystemAccount account;
    private bool isLoading = true;
    private bool isUnauthorized = false;
    private string errorMessage = string.Empty;
    
    protected override void OnInitialized()
    {
        try
        {
            // Check authorization
            // var httpContext = HttpContextAccessor.HttpContext;
            // if (httpContext != null)
            // {
            //     var email = httpContext.Session.GetString("Email");
            //     var roleId = httpContext.Session.GetInt32("RoleId");
            //     var isAdmin = httpContext.Session.GetString("IsAdmin");

            //     if (string.IsNullOrEmpty(email))
            //     {
            //         NavigationManager.NavigateTo("/login");
            //         return;
            //     }

            //     Check authorization - only admin or role 1 can access
            //     if ((roleId != 1) && (isAdmin != "true"))
            //     {
            //         isUnauthorized = true;
            //         isLoading = false;
            //         return;
            //     }
            // }
            
            // Parse the account ID from the query string
            if (string.IsNullOrEmpty(accountIdString) || !short.TryParse(accountIdString, out short accountId))
            {
                errorMessage = "Invalid account ID";
                isLoading = false;
                return;
            }
            
            // Load the account by ID
            account = AccountRepository.GetAccountById(accountId);
            
            if (account == null)
            {
                errorMessage = "Account not found";
                isLoading = false;
                return;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading account: {ex.Message}";
            Console.WriteLine($"Error initializing page: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void DeleteAccount()
    {
        try
        {
            if (account != null)
            {
                // Delete the account
                AccountRepository.DeleteAccount(account.AccountId);
                
                // Redirect to the account list
                NavigationManager.NavigateTo("/systemaccounts");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting account: {ex.Message}";
            Console.WriteLine($"Error deleting account: {ex.Message}");
        }
    }
}