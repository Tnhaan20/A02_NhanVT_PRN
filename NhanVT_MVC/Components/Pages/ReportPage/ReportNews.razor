@page "/reports/news"
@using A02_BOs
@using A02_Repos
@using System.Text.Json
@inject INewsArticleRepository NewsArticleRepository
@inject ICategoriesRepo CategoryRepository
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using NhanVT_MVC.Components.Auth

<PageTitle>News Statistics Report</PageTitle>
<AuthCheck RequireAdmin="true"> 

<div class="container mt-4">
    <h2 class="mb-4">News Statistics Report</h2>

    <!-- Date Range Selector -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Select Date Range</h5>
        </div>
        <div class="card-body">
            <div class="row align-items-end">
                <div class="col-md-4">
                    <label for="startDate" class="form-label">Start Date</label>
                    <InputDate id="startDate" @bind-Value="startDate" class="form-control" />
                </div>
                <div class="col-md-4">
                    <label for="endDate" class="form-label">End Date</label>
                    <InputDate id="endDate" @bind-Value="endDate" class="form-control" />
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="GenerateReport">Generate Report</button>
                </div>
            </div>
        </div>
    </div>

    @if (showReport)
    {
        <!-- Summary Statistics -->
        <div class="card mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Report Summary</h5>
                <small>Period: @startDate.ToString("yyyy-MM-dd") to @endDate.ToString("yyyy-MM-dd")</small>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <canvas id="categoryChart" width="400" height="300"></canvas>
                    </div>
                    <div class="col-md-6">
                        <canvas id="statusChart" width="400" height="300"></canvas>
                    </div>
                </div>

                <div class="row mt-4">
                    <div class="col-md-6">
                        <canvas id="dailyArticlesChart" width="400" height="300"></canvas>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">Statistics Summary</h5>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Total Articles
                                        <span class="badge bg-primary rounded-pill">@filteredArticles.Count</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Active Articles
                                        <span class="badge bg-success rounded-pill">@filteredArticles.Count(a => a.NewsStatus == true)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Inactive Articles
                                        <span class="badge bg-danger rounded-pill">@filteredArticles.Count(a => a.NewsStatus != true)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Categories Represented
                                        <span class="badge bg-info rounded-pill">@filteredArticles.Select(a => a.CategoryId).Distinct().Count()</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed News Data -->
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">News Articles (Sorted by Created Date - Newest First)</h5>
            </div>
            <div class="card-body">
                @if (filteredArticles.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Created Date</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var article in filteredArticles)
                                {
                                    <tr>
                                        <td>@article.NewsTitle</td>
                                        <td>@(article.CreatedDate?.ToString("yyyy-MM-dd") ?? "N/A")</td>
                                        <td>@GetCategoryName(article.CategoryId)</td>
                                        <td>
                                            @if (article.NewsStatus == true)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Inactive</span>
                                            }
                                        </td>
                                        <td>
                                            <a href="@($"/newsarticles/details?newsarticleid={article.NewsArticleId}")" class="btn btn-sm btn-info">View</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        No news articles found in the selected date range.
                    </div>
                }
            </div>
        </div>
    }
</div>
</AuthCheck>
@code {
    private DateTime startDate = DateTime.Today.AddMonths(-1);
    private DateTime endDate = DateTime.Today;
    private List<NewsArticle> allArticles = new List<NewsArticle>();
    private List<NewsArticle> filteredArticles = new List<NewsArticle>();
    private bool showReport = false;

    // Chart data properties
    private ChartData categoryData;
    private ChartData statusData;
    private ChartData dailyArticlesData;

    protected override void OnInitialized()
    {
        try
        {
            // Authentication check removed for testing
            
            // Load all articles
            allArticles = NewsArticleRepository.GetNewsArticles();
            
            Console.WriteLine($"Loaded {allArticles.Count} articles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing page: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("First render - loading Chart.js");
            
            // Load Chart.js library when component first renders
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (!document.getElementById('chartjs-script')) {
                    var script = document.createElement('script');
                    script.id = 'chartjs-script';
                    script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
                    script.onload = function() {
                        console.log('Chart.js loaded successfully');
                    };
                    document.head.appendChild(script);
                }

                // Global chart references
                var categoryChart;
                var statusChart;
                var dailyArticlesChart;

                window.renderCharts = function(categoryJsonData, statusJsonData, dailyArticlesJsonData) {
                    console.log('Rendering charts with data:', categoryJsonData);
                    
                    const categoryData = JSON.parse(categoryJsonData);
                    const statusData = JSON.parse(statusJsonData);
                    const dailyArticlesData = JSON.parse(dailyArticlesJsonData);

                    // Destroy previous charts if they exist
                    if (categoryChart) categoryChart.destroy();
                    if (statusChart) statusChart.destroy();
                    if (dailyArticlesChart) dailyArticlesChart.destroy();

                    // Wait a bit to ensure Chart.js is fully loaded
                    setTimeout(function() {
                        // Ensure Chart.js is loaded before proceeding
                        if (typeof Chart !== 'undefined') {
                            console.log('Chart.js is loaded, creating charts');
                            
                            // Category Chart
                            const categoryCtx = document.getElementById('categoryChart');
                            if (categoryCtx) {
                                categoryChart = new Chart(categoryCtx.getContext('2d'), {
                                    type: 'pie',
                                    data: {
                                        labels: categoryData.Labels,
                                        datasets: [{
                                            label: 'Articles by Category',
                                            data: categoryData.Data,
                                            backgroundColor: [
                                                '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e',
                                                '#e74a3b', '#5a5c69', '#858796', '#6610f2',
                                                '#6f42c1', '#fd7e14'
                                            ],
                                            hoverOffset: 4
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        plugins: {
                                            legend: { position: 'right' },
                                            title: {
                                                display: true,
                                                text: 'Articles by Category'
                                            }
                                        }
                                    }
                                });
                                console.log('Category chart created');
                            } else {
                                console.error('Category chart canvas not found');
                            }

                            // Status Chart
                            const statusCtx = document.getElementById('statusChart');
                            if (statusCtx) {
                                statusChart = new Chart(statusCtx.getContext('2d'), {
                                    type: 'doughnut',
                                    data: {
                                        labels: statusData.Labels,
                                        datasets: [{
                                            label: 'Articles by Status',
                                            data: statusData.Data,
                                            backgroundColor: [
                                                '#1cc88a', // Active - Green
                                                '#e74a3b'  // Inactive - Red
                                            ],
                                            hoverOffset: 4
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        plugins: {
                                            legend: { position: 'right' },
                                            title: {
                                                display: true,
                                                text: 'Articles by Status'
                                            }
                                        }
                                    }
                                });
                                console.log('Status chart created');
                            } else {
                                console.error('Status chart canvas not found');
                            }

                            // Daily Articles Chart
                            const dailyArticlesCtx = document.getElementById('dailyArticlesChart');
                            if (dailyArticlesCtx) {
                                dailyArticlesChart = new Chart(dailyArticlesCtx.getContext('2d'), {
                                    type: 'bar',
                                    data: {
                                        labels: dailyArticlesData.Labels,
                                        datasets: [{
                                            label: 'Articles Published',
                                            data: dailyArticlesData.Data,
                                            backgroundColor: '#4e73df',
                                            borderColor: '#4e73df',
                                            borderWidth: 1
                                        }]
                                    },
                                    options: {
                                        responsive: true,
                                        scales: {
                                            y: {
                                                beginAtZero: true,
                                                ticks: { precision: 0 }
                                            }
                                        },
                                        plugins: {
                                            title: {
                                                display: true,
                                                text: 'Articles Published by Day'
                                            }
                                        }
                                    }
                                });
                                console.log('Daily articles chart created');
                            } else {
                                console.error('Daily articles chart canvas not found');
                            }
                        } else {
                            console.error('Chart.js is not loaded');
                        }
                    }, 300);  // 300ms delay to ensure Chart.js is fully loaded
                };
            ");
        }
    }

    private void GenerateReport()
    {
        Console.WriteLine("Generating report");
        
        // Adjust end date to include the entire day
        DateTime endDateAdjusted = endDate.AddDays(1).AddTicks(-1);

        // Filter articles by date range
        filteredArticles = allArticles
            .Where(a => a.CreatedDate.HasValue &&
                       a.CreatedDate.Value >= startDate &&
                       a.CreatedDate.Value <= endDateAdjusted)
            .OrderByDescending(a => a.CreatedDate)
            .ToList();
            
        Console.WriteLine($"Filtered to {filteredArticles.Count} articles");

        // Prepare chart data
        PrepareChartData();

        // Show the report section
        showReport = true;

        // Render charts after UI update
        InvokeAsync(async () => await RenderChartsWithDelayAsync());
    }

    private async Task RenderChartsWithDelayAsync()
    {
        // Give the DOM time to update
        await Task.Delay(800);  // Increased delay for better reliability
        await RenderChartsAsync();
    }

    private async Task RenderChartsAsync()
    {
        if (!showReport) return;

        var categoryJsonData = JsonSerializer.Serialize(categoryData);
        var statusJsonData = JsonSerializer.Serialize(statusData);
        var dailyArticlesJsonData = JsonSerializer.Serialize(dailyArticlesData);
        
        Console.WriteLine("Attempting to render charts...");
        
        await JSRuntime.InvokeVoidAsync("renderCharts", categoryJsonData, statusJsonData, dailyArticlesJsonData);
    }

    private void PrepareChartData()
    {
        Console.WriteLine("Preparing chart data");
        
        // Prepare category data for chart
        var categoryGroups = filteredArticles
            .Where(a => a.CategoryId.HasValue)
            .GroupBy(a => GetCategoryName(a.CategoryId))
            .Select(g => new { Name = g.Key, Count = g.Count() })
            .OrderByDescending(g => g.Count)
            .ToList();

        categoryData = new ChartData
        {
            Labels = categoryGroups.Select(g => g.Name).ToArray(),
            Data = categoryGroups.Select(g => g.Count).ToArray()
        };
        
        Console.WriteLine($"Created category data with {categoryData.Labels.Length} categories");

        // Prepare status data for chart
        var activeCount = filteredArticles.Count(a => a.NewsStatus == true);
        var inactiveCount = filteredArticles.Count(a => a.NewsStatus != true);

        statusData = new ChartData
        {
            Labels = new[] { "Active", "Inactive" },
            Data = new[] { activeCount, inactiveCount }
        };
        
        Console.WriteLine($"Created status data: Active={activeCount}, Inactive={inactiveCount}");

        // Prepare daily articles data for chart
        var dailyGroups = filteredArticles
            .Where(a => a.CreatedDate.HasValue)
            .GroupBy(a => a.CreatedDate.Value.Date)
            .Select(g => new { Date = g.Key, Count = g.Count() })
            .OrderBy(g => g.Date)
            .ToList();

        dailyArticlesData = new ChartData
        {
            Labels = dailyGroups.Select(g => g.Date.ToString("MM/dd/yyyy")).ToArray(),
            Data = dailyGroups.Select(g => g.Count).ToArray()
        };
        
        Console.WriteLine($"Created daily articles data with {dailyArticlesData.Labels.Length} days");
    }

    private string GetCategoryName(short? categoryId)
    {
        if (!categoryId.HasValue) return "Uncategorized";
        
        var category = CategoryRepository.GetCategoryId(categoryId.Value);
        return category?.CategoryName ?? "Unknown";
    }

    // Class to structure chart data for serialization to JSON
    public class ChartData
    {
        public string[] Labels { get; set; }
        public int[] Data { get; set; }
    }
}